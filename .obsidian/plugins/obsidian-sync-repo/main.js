/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var process = __toESM(require("process"));
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("sync", "Sample Plugin", async (evt) => {
      const cwd2 = this.app.vault.adapter.basePath;
      const term = (0, import_child_process.spawn)("open", ["-a", "iTerm", cwd2]);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgZXhlYywgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5cbmludGVyZmFjZSBNeVBsdWdpblNldHRpbmdzIHtcbiAgbXlTZXR0aW5nOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XG4gIG15U2V0dGluZzogJ2RlZmF1bHQnXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN5bmNMb2NhbGVOb3RlKHNjcmlwdDogc3RyaW5nLCBjd2Q6IHN0cmluZyk6IFByb21pc2U8eyBzdGRvdXQ6IHN0cmluZywgc3RkZXJyOiBzdHJpbmcgfT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdjd2QnLCBjd2QpXG4gICAgZXhlYyhzY3JpcHQsIHsgY3dkIH0sIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjJBNVx1OTUxOVx1OERFRlx1NUY4NFxuICAgICAgICBjb25zdCBjd2QyID0gcHJvY2Vzcy5jd2QoKTtcbiAgICAgICAgY29uc29sZS5sb2coY3dkMilcbiAgICAgICAgcmVqZWN0KGN3ZDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSh7IHN0ZG91dCwgc3RkZXJyIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgIGNvbnN0IHJpYmJvbkljb25FbCA9IHRoaXMuYWRkUmliYm9uSWNvbignc3luYycsICdTYW1wbGUgUGx1Z2luJywgYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgIC8vICAgbmV3IE5vdGljZSgnYWFhYSEnKTtcbiAgICAvLyAgIGNvbnNvbGUubG9nKCctLS0tLS0nKVxuICAgICAgY29uc3QgY3dkID0gdGhpcy5hcHAudmF1bHQuYWRhcHRlci5iYXNlUGF0aDtcbiAgICAgIGNvbnN0IHRlcm0gPSBzcGF3bignb3BlbicsIFsnLWEnLCAnaVRlcm0nLCBjd2RdKTtcblxuICAgICAgLy8gXHU4RkQ5XHU4ODRDXHU0RUUzXHU3ODAxXHU3Njg0XHU2MTBGXHU2MDFEXHU2NjJGXHVGRjBDXHU1RjUzXHU1QjUwXHU4RkRCXHU3QTBCXHU2NzA5XHU4RjkzXHU1MUZBXHU2NUY2XHVGRjBDXHU1QzA2XHU1QjUwXHU4RkRCXHU3QTBCXHU3Njg0XHU4RjkzXHU1MUZBXHU2MjUzXHU1MzcwXHU1MjMwXHU0RTNCXHU4RkRCXHU3QTBCXHU3Njg0XHU2M0E3XHU1MjM2XHU1M0YwXHU0RTJEXG4gICAgICAvLyBzcGF3bigncHdkJywgeyBjd2QsIHN0ZGlvOiAnaW5oZXJpdCcgfSk7XG4gICAgLy8gICAvLyBleGVjKGBjZCAke2N3ZH0gJiYgcHdkYCwgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAvLyAgIC8vICAgY29uc29sZS5sb2coZXJyLCBzdGRvdXQsIHN0ZGVycilcbiAgICAvLyAgIC8vIH0pXG5cbiAgICAvLyBleGVjKGBzaCAke2N3ZH0vLmNpL3N5bmMtbm90ZS5zaGAsIHsgY3dkIH0sIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7fSlcblxuICAgIC8vICAgZXhlYyhgb3BlbiAtYSBpVGVybSAke2N3ZH0gJiYgbnBtIC0taGVscGAsIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGVyciwgc3Rkb3V0LCBzdGRlcnIpXG4gICAgLy8gICB9KVxuICAgIC8vICAgLy8gZXhlYygnc2ggLmNpL3N5bmMtbm90ZS5zaCcsIHsgY3dkLCBzaGVsbDogdHJ1ZSB9LCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgIC8vICAgLy8gICBpZiAoZXJyKSB7XG4gICAgLy8gICAvLyAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIC8vICAgLy8gICAgIHJldHVybjtcbiAgICAvLyAgIC8vICAgfVxuICAgIC8vICAgLy8gICBjb25zb2xlLmxvZyhzdGRvdXQpO1xuICAgIC8vICAgLy8gICBjb25zb2xlLmxvZyhzdGRlcnIpO1xuICAgIC8vICAgLy8gfSk7XG5cblxuICAgICAgLy8gYXdhaXQgc3luY0xvY2FsZU5vdGUoYHNoIC5jaS9zeW5jLW5vdGUuc2hgLCBjd2QpXG4gICAgfSk7XG4gICAgLy8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXG4gICAgdGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiBjb25zb2xlLmxvZygnc2V0SW50ZXJ2YWwnKSwgNSAqIDYwICogMTAwMCkpO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG5cbiAgfVxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFDdkIsMkJBQTRCO0FBQzVCLGNBQXlCO0FBTXpCLElBQU0sbUJBQXFDO0FBQUEsRUFDekMsV0FBVztBQUNiO0FBaUJBLElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFFM0MsTUFBTSxTQUFTO0FBQ2IsVUFBTSxLQUFLLGFBQWE7QUFDeEIsVUFBTSxlQUFlLEtBQUssY0FBYyxRQUFRLGlCQUFpQixPQUFPLFFBQW9CO0FBRzFGLFlBQU1BLE9BQU0sS0FBSyxJQUFJLE1BQU0sUUFBUTtBQUNuQyxZQUFNLFdBQU8sNEJBQU0sUUFBUSxDQUFDLE1BQU0sU0FBU0EsSUFBRyxDQUFDO0FBQUEsSUF3QmpELENBQUM7QUFFRCxTQUFLLGlCQUFpQixPQUFPLFlBQVksTUFBTSxRQUFRLElBQUksYUFBYSxHQUFHLElBQUksS0FBSyxHQUFJLENBQUM7QUFBQSxFQUMzRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBRVg7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbkM7QUFDRjsiLAogICJuYW1lcyI6IFsiY3dkIl0KfQo=
